<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://chouzz.github.io/</id><title>Chouzz's blog</title><subtitle>一个记录读书笔记、生活分享、技术博文的地方</subtitle> <updated>2023-03-23T22:39:33+08:00</updated> <author> <name>chouzz</name> <uri>https://chouzz.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://chouzz.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://chouzz.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 chouzz </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>白夜行读后感</title><link href="https://chouzz.github.io/posts/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/" rel="alternate" type="text/html" title="白夜行读后感" /><published>2022-03-04T21:50:00+08:00</published> <updated>2022-03-04T21:50:00+08:00</updated> <id>https://chouzz.github.io/posts/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/</id> <content src="https://chouzz.github.io/posts/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/" /> <author> <name>chouzz</name> </author> <category term="观/读后感" /> <summary> 文章先开始介绍了一宗谋杀案，桐原良介被谋杀了，而他老婆以前是做妓女的，和他的店铺的店长有点可疑，但是又没有什么特别的证据，他有一个儿子桐原亮司，然后警方又找到了他临死前去的地方，也就是西本文代家，西本文代有个女儿，自己也是那种高冷美人，老公七年前就死了，家里比较平穷，有一个很可爱很聪明的女儿，西本雪慧。 第二章讲的是秋吉雄一是个玩摄影的穷小子，他被派去偷拍雪穗，他有一个好基友菊池文彦，然后这边的雪穗已经被收养了，改名问唐泽雪穗，她的一个闺蜜江利子很羡慕她，不过也听到了一些和她有关的传闻，很快，另外一个人都子被人打晕遭到威胁，有人怀疑过秋吉、文彦，还有秋吉出卖过一个人名字叫做 xx，被打了一顿。桐原亮司，也就是第一章受害人的孩子，亮司性格比较沉闷，话也比较少但是居然和雪穗关系密切，令人不解。 第三章 三个高中生被桐原亮司拉去做男妓，他自己也是，还是多人运动。。。然后有个女的还死了，... </summary> </entry> <entry><title>二分查找-BinraySearch总结</title><link href="https://chouzz.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-binraysearch%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="二分查找-BinraySearch总结" /><published>2022-01-04T22:53:00+08:00</published> <updated>2022-01-04T22:53:00+08:00</updated> <id>https://chouzz.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-binraysearch%E6%80%BB%E7%BB%93/</id> <content src="https://chouzz.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-binraysearch%E6%80%BB%E7%BB%93/" /> <author> <name>chouzz</name> </author> <summary> 前言 二分查找(Binary Search)是一种从有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。 如果在某一步骤数组为空，则代表找不到。 算法实现(python) while 循环写法 def binary_search(nums: List[int], target: int): left = 0 right = len(nums)-1 while left &amp;lt;= right: mid = left + (right-left) // 2 if target &amp;lt; nums[mid]: right =... </summary> </entry> <entry><title>排序算法总结</title><link href="https://chouzz.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="排序算法总结" /><published>2022-01-02T13:52:00+08:00</published> <updated>2022-01-02T13:52:00+08:00</updated> <id>https://chouzz.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id> <content src="https://chouzz.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/" /> <author> <name>chouzz</name> </author> <category term="数据结构与算法" /> <summary> 排序算法 排序算法是计算机科学中最基础的算法之一，它们将一组元素按照一定的规则重新排列。下面是一些常见的排序算法： 冒泡排序（Bubble Sort）：比较相邻的两个元素，如果前一个比后一个大，就交换它们的位置。重复这个过程，直到没有任何一对数字需要交换为止。 插入排序（Insertion Sort）：将数组分为已排序区间和未排序区间，初始时已排序区间只有一个元素，每次将未排序区间中的一个元素插入到已排序区间中的正确位置。 选择排序（Selection Sort）：每次从未排序区间中找到最小（或最大）的元素，将其放到已排序区间的末尾。 快速排序（Quick Sort）：选择一个基准元素，将小于它的元素放在左边，大于它的元素放在右边，然后对它左右两边的子数组分别递归地进行同样的操作。 归... </summary> </entry> <entry><title>设计模式之命令模式</title><link href="https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="设计模式之命令模式" /><published>2021-06-20T17:44:00+08:00</published> <updated>2022-01-01T22:44:22+08:00</updated> <id>https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id> <content src="https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/" /> <author> <name>chouzz</name> </author> <category term="设计模式" /> <summary> 设计模式之命令模式 简介 命令模式，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。 命令模式的 UML 类图： Cpp 基本实现 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;list&amp;gt; class Stock{ public: void buy(){ std::cout &amp;lt;&amp;lt;"Name: " &amp;lt;&amp;lt; name&amp;lt;&amp;lt; " Quantity: "&amp;lt;&amp;lt; quantity&amp;lt;&amp;lt;" bought" &amp;lt;&amp;lt;std::endl; } void sell(){ std::cout &amp;lt;&amp;l... </summary> </entry> <entry><title>cpp-设计模式之单例模式</title><link href="https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="cpp-设计模式之单例模式" /><published>2021-06-17T22:29:37+08:00</published> <updated>2022-01-01T22:44:22+08:00</updated> <id>https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id> <content src="https://chouzz.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" /> <author> <name>chouzz</name> </author> <category term="设计模式" /> <summary> 设计模式之单例模式 单例模式简介 单例模式是最简单的模式之一，其目的为保证一个类只有一个实例，并提供一个访问它的全局节点. 懒汉式(Lazy Singleton) 懒汉式是最基本的单例模式，单例实例会在第一次被使用时才进行初始化，称之为延迟初始化 #include &amp;lt;iostream&amp;gt; class Singleton{ public: static Singleton * getInstance(){ if(pInstance == nullptr){ pInstance = new Singleton(); std::cout &amp;lt;&amp;lt; "创建唯一实例" &amp;lt;&amp;lt; std::endl; } return pInstance; ... </summary> </entry> </feed>
